{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Import libraries and define common helper functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import gzip\n",
    "import json\n",
    "from pathlib import Path\n",
    "import csv\n",
    "import pandas as pd\n",
    "import s3fs\n",
    "import pyarrow as pa\n",
    "from pyarrow.json import read_json\n",
    "import pyarrow.parquet as pq\n",
    "import fastavro\n",
    "import pygeohash\n",
    "import snappy\n",
    "import jsonschema\n",
    "from jsonschema.exceptions import ValidationError\n",
    "import genson #This is for the creation of the schema\n",
    "\n",
    "\n",
    "endpoint_url='https://storage.budsc.midwest-datascience.com'\n",
    "\n",
    "current_dir = Path(os.getcwd()).absolute()\n",
    "schema_dir = current_dir.joinpath('schemas')\n",
    "results_dir = current_dir.joinpath('results')\n",
    "results_dir.mkdir(parents=True, exist_ok=True)\n",
    "\n",
    "#editing the function to use the github resource as the original function wasn't working\n",
    "def read_jsonl_data():\n",
    "    src_data_path = '../../../data/processed/openflights/routes.jsonl.gz'\n",
    "    with gzip.open(src_data_path, 'rb') as f:\n",
    "        records = [json.loads(line) for line in f.readlines()]\n",
    "    return records"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the records from https://storage.budsc.midwest-datascience.com/data/processed/openflights/routes.jsonl.gz "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "records = read_jsonl_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'airline': {'airline_id': 410,\n",
       "  'name': 'Aerocondor',\n",
       "  'alias': 'ANA All Nippon Airways',\n",
       "  'iata': '2B',\n",
       "  'icao': 'ARD',\n",
       "  'callsign': 'AEROCONDOR',\n",
       "  'country': 'Portugal',\n",
       "  'active': True},\n",
       " 'src_airport': {'airport_id': 6156,\n",
       "  'name': 'Belgorod International Airport',\n",
       "  'city': 'Belgorod',\n",
       "  'country': 'Russia',\n",
       "  'iata': 'EGO',\n",
       "  'icao': 'UUOB',\n",
       "  'latitude': 50.643798828125,\n",
       "  'longitude': 36.5900993347168,\n",
       "  'altitude': 735,\n",
       "  'timezone': 3.0,\n",
       "  'dst': 'N',\n",
       "  'tz_id': 'Europe/Moscow',\n",
       "  'type': 'airport',\n",
       "  'source': 'OurAirports'},\n",
       " 'dst_airport': {'airport_id': 2990,\n",
       "  'name': 'Kazan International Airport',\n",
       "  'city': 'Kazan',\n",
       "  'country': 'Russia',\n",
       "  'iata': 'KZN',\n",
       "  'icao': 'UWKD',\n",
       "  'latitude': 55.606201171875,\n",
       "  'longitude': 49.278701782227,\n",
       "  'altitude': 411,\n",
       "  'timezone': 3.0,\n",
       "  'dst': 'N',\n",
       "  'tz_id': 'Europe/Moscow',\n",
       "  'type': 'airport',\n",
       "  'source': 'OurAirports'},\n",
       " 'codeshare': False,\n",
       " 'equipment': ['CR2']}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#want to see what the data actually looks like\n",
    "records[10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.1.a JSON Schema"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: genson in /opt/conda/lib/python3.10/site-packages (1.2.2)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install genson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import genson #This is for the creation of the schema"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def validate_jsonl_data(records):\n",
    "    schema_path = schema_dir.joinpath('routes-schema.json')\n",
    "    with open(schema_path) as file:\n",
    "        schema = json.load(file)\n",
    "    #creating txt file\n",
    "    valCSV = \"validation.txt\"\n",
    "    with open(valCSV, 'w') as file:    \n",
    "        for i, record in enumerate(records):\n",
    "            try:\n",
    "                ## TODO: Validate record \n",
    "                jsonschema.validate(record, schema)\n",
    "                pass\n",
    "            except ValidationError as e:\n",
    "                ## Print message if invalid record\n",
    "                file.write(f\"Record {i} has failed. Please review.: {str(e)}\\n\")\n",
    "                pass\n",
    "\n",
    "    # Putting the actual records into the designated file path\n",
    "    schema = genson.Schema()\n",
    "    \n",
    "    for x in records:\n",
    "        schema.add_object(x)\n",
    "    \n",
    "    # Creating the dictionary for JSON\n",
    "    jsonLook = schema.to_dict()\n",
    "\n",
    "    with open(schema_path, 'w') as file:\n",
    "        json.dump(jsonLook, file, indent=2)\n",
    "\n",
    "validate_jsonl_data(records)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.1.b Avro"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_avro_dataset(records):\n",
    "    schema_path = schema_dir.joinpath('routes.avsc')\n",
    "    data_path = results_dir.joinpath('routes.avro')\n",
    "\n",
    " \n",
    "\n",
    "    with open(schema_path) as f:\n",
    "        schema = json.load(f)\n",
    "\n",
    " \n",
    "\n",
    "    with open(data_path, 'wb') as avro_file:\n",
    "        fastavro.writer(avro_file, schema, records)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.1.c Parquet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_parquet_dataset():\n",
    "    src_data_path = '../../../data/processed/openflights/routes.jsonl.gz'\n",
    "    parquet_output_path = results_dir.joinpath('routes.parquet')\n",
    "    \n",
    "    # s3 wasn't working for me so i went back to a previous semester's channel and found this workaround\n",
    "    with open(src_data_path, 'rb') as f_gz:\n",
    "        with gzip.open(f_gz, 'rb') as f:\n",
    "\n",
    "            # Iterate through and save the records one by one\n",
    "            #Initializing the blank list\n",
    "            record_batches = []\n",
    "            \n",
    "            #Here's where the actual iteration is happening\n",
    "            for line in f:\n",
    "                record = json.loads(line)\n",
    "                record_batch = pa.record_batch([pa.array([json.loads(line) for line in f.readlines()])], names=['Flights'])\n",
    "                record_batches.append(record_batch)\n",
    "            \n",
    "            # Collect all the record batches into the table.\n",
    "            table = pa.Table.from_batches(record_batches)\n",
    "            \n",
    "    # Write the Parquet table to a file\n",
    "    pq.write_table(table, str(parquet_output_path))\n",
    "\n",
    "create_parquet_dataset()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.1.d Protocol Buffers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "sys.path.insert(0, os.path.abspath('routes_pb2'))\n",
    "\n",
    "import routes_pb2\n",
    "\n",
    "def _airport_to_proto_obj(airport):\n",
    "    obj = routes_pb2.Airport()\n",
    "    if airport is None:\n",
    "        return None\n",
    "    if airport.get('airport_id') is None:\n",
    "        return None\n",
    "\n",
    "    obj.airport_id = airport.get('airport_id')\n",
    "    if airport.get('name'):\n",
    "        obj.name = airport.get('name')\n",
    "    if airport.get('city'):\n",
    "        obj.city = airport.get('city')\n",
    "    if airport.get('iata'):\n",
    "        obj.iata = airport.get('iata')\n",
    "    if airport.get('icao'):\n",
    "        obj.icao = airport.get('icao')\n",
    "    if airport.get('altitude'):\n",
    "        obj.altitude = airport.get('altitude')\n",
    "    if airport.get('timezone'):\n",
    "        obj.timezone = airport.get('timezone')\n",
    "    if airport.get('dst'):\n",
    "        obj.dst = airport.get('dst')\n",
    "    if airport.get('tz_id'):\n",
    "        obj.tz_id = airport.get('tz_id')\n",
    "    if airport.get('type'):\n",
    "        obj.type = airport.get('type')\n",
    "    if airport.get('source'):\n",
    "        obj.source = airport.get('source')\n",
    "\n",
    "    obj.latitude = airport.get('latitude')\n",
    "    obj.longitude = airport.get('longitude')\n",
    "\n",
    "    return obj\n",
    "\n",
    "\n",
    "def _airline_to_proto_obj(airline):\n",
    "    obj = routes_pb2.Airline()\n",
    "    #Got stuck here -- also found this in a previous channel. Worked hard to finally understand though!\n",
    "    if not airline.get('name'):\n",
    "        return None\n",
    "    if not airline.get('airline_id'):\n",
    "        return None\n",
    "    \n",
    "    #actually grabbing the airline id\n",
    "    obj.airline_id = airline.get('airline_id')\n",
    "    #grabbing t he name\n",
    "    obj.name = airline.get('name')\n",
    "    #checking for an alias\n",
    "    if airline.get('alias'):\n",
    "        obj.alias = airline.get('alias')\n",
    "    #putting the rest of the attributes in there\n",
    "    if airline.get('iata'):\n",
    "        obj.iata = airline.get('iata')\n",
    "    if airline.get('icao'):\n",
    "        obj.icao = airline.get('icao')\n",
    "    if airline.get('callsign'):\n",
    "        obj.callsign = airline.get('callsign')\n",
    "    if airline.get('country'):\n",
    "        obj.country = airline.get('country')\n",
    "    \n",
    "    # if not active set to false\n",
    "    if airline.get('active'):\n",
    "        obj.active = airline.get('active')\n",
    "    else:\n",
    "        obj.active = False\n",
    "    \n",
    "    return obj\n",
    "\n",
    "\n",
    "def create_protobuf_dataset(records):\n",
    "    routes = routes_pb2.Routes()\n",
    "    for record in records:\n",
    "        route = routes_pb2.Route()\n",
    "        ## TODO: Implement the code to create the Protocol Buffers Dataset\n",
    "        # Professor's code from previous semester\n",
    "        airline = _airline_to_proto_obj(record.get('airline', {}))\n",
    "        if airline:\n",
    "            route.airline.CopyFrom(airline)\n",
    "        src_airport = _airport_to_proto_obj(record.get('src_airport', {}))\n",
    "        \n",
    "        \n",
    "        # get the remaining pieces in there\n",
    "        if record.get('dst_airport'):\n",
    "            route.dst_airport.CopyFrom(_airport_to_proto_obj(record[\"dst_airport\"]))\n",
    "        if 'codeshare' in record and record['codeshare'] is not None:\n",
    "            route.codeshare = record['codeshare']\n",
    "        else:\n",
    "            route.codeshare = False\n",
    "\n",
    "        if record.get('stops'):\n",
    "            route.stops = record[\"stops\"]\n",
    "        if record.get('equipment'):\n",
    "            route.equipment.append(\"equipment\")\n",
    "        \n",
    "        routes.route.append(route)\n",
    "\n",
    "    data_path = results_dir.joinpath('routes.pb')\n",
    "\n",
    "    with open(data_path, 'wb') as f:\n",
    "        f.write(routes.SerializeToString())\n",
    "        \n",
    "    compressed_path = results_dir.joinpath('routes.pb.snappy')\n",
    "    \n",
    "    with open(compressed_path, 'wb') as f:\n",
    "        f.write(snappy.compress(routes.SerializeToString()))\n",
    "        \n",
    "create_protobuf_dataset(records)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2.a Simple Geohash Index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_hash_dirs(records):\n",
    "    geoindex_dir = results_dir.joinpath('geoindex')\n",
    "    geoindex_dir.mkdir(exist_ok=True, parents=True)\n",
    "    #initializing the blank list\n",
    "    hashes = []\n",
    "    ## TODO: Create hash index\n",
    "    for x in records:\n",
    "        src_airport = x.get('src_airport', {})\n",
    "        if src_airport:\n",
    "            lat = src_airport.get('latitude')\n",
    "            long = src_airport.get('longitude')\n",
    "            if lat and long:\n",
    "                # .encode to give the geohashes\n",
    "                geo = pygeohash.encode(lat, long)\n",
    "                x['geohash'] = geo\n",
    "                #appending the results into the blank list\n",
    "                hashes.append(geo)\n",
    "    #sorting the list            \n",
    "    hashes.sort()\n",
    "    #sorting the list and cutting to only show first 3\n",
    "    three = sorted(list(set([entry[:3] for entry in hashes])))\n",
    "    hash_index = {value: [] for value in three}\n",
    "    for x in records:\n",
    "        geohash = x.get('geohash')\n",
    "        if geohash:\n",
    "            hash_index[geohash[:3]].append(x)\n",
    "    for k, v in hash_index.items():\n",
    "        output_dir = geoindex_dir.joinpath(str(k[:1])).joinpath(str(k[:2]))\n",
    "        output_dir.mkdir(exist_ok=True, parents=True)\n",
    "        output_path = output_dir.joinpath('{}.jsonl.gz'.format(k))\n",
    "        with gzip.open(output_path, 'w') as file:\n",
    "            json_output = '\\n'.join([json.dumps(value) for value in v])\n",
    "            file.write(json_output.encode('utf-8')) #utf encoding so it doesn't break\n",
    "            \n",
    "create_hash_dirs(records)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2.b Simple Search Feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Closest airport: Eppley Airfield,  Distance: 19.55 Kilometers\n"
     ]
    }
   ],
   "source": [
    "def airport_search(latitude, longitude):\n",
    "    \n",
    "    # location\n",
    "    location_temp = pygeohash.encode(latitude, longitude)\n",
    "    \n",
    "    # Pulling in the records\n",
    "    records = read_jsonl_data()\n",
    "    \n",
    "    # setting distance and initializing blank dictionary\n",
    "    sDist = 10000000\n",
    "    sRecord = {}\n",
    "    \n",
    "    # Loop over the records to find the nearest one based on lat and long.\n",
    "    for x in records:\n",
    "        if x.get('src_airport'):\n",
    "            temp_loc = pygeohash.encode(x[\"src_airport\"][\"latitude\"], x[\"src_airport\"][\"longitude\"])\n",
    "            if pygeohash.geohash_approximate_distance(location_temp, temp_loc, check_validity=False) < sDist:\n",
    "                sDist = pygeohash.geohash_approximate_distance(location_temp, temp_loc, check_validity=False)\n",
    "                sRecord = x\n",
    "\n",
    "    # Message for testing\n",
    "    print(f\"Closest airport: {sRecord['src_airport']['name']},  Distance: {round(sDist/1000,2)} Kilometers\")\n",
    "\n",
    "# Test the airport search function.\n",
    "airport_search(41.1499988, -95.91779)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
